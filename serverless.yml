service: bakuon2-api

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  stage: ${opt:stage, self:custom.defaultStage}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TZ: Asia/Tokyo

custom:
  defaultStage: dev
  profiles:
    dev: sls
    prd: sls
  otherfile:
    environment:
      dev: ${file(./env/dev/environment.yml)}
      prd: ${file(./env/prd/environment.yml)}

package:
  exclude:
    - .git/**
    - test/**
    - README.md

plugins:
  - serverless-bundle
  - serverless-offline

functions:
  bakuon2Backend:
    handler: app.handler
    environment:
      ENVFILE: ${self:custom.otherfile.environment.${self:provider.stage}.ENVFILE}
      RDS_HOST: ${self:custom.otherfile.environment.${self:provider.stage}.RDS_HOST}
      RDS_PORT: ${self:custom.otherfile.environment.${self:provider.stage}.RDS_PORT}
      RDS_USER: ${self:custom.otherfile.environment.${self:provider.stage}.RDS_USER}
      RDS_PW: ${self:custom.otherfile.environment.${self:provider.stage}.RDS_PW}
      RDS_DB: ${self:custom.otherfile.environment.${self:provider.stage}.RDS_DB}
      RDS_CONN_LIMMIT: ${self:custom.otherfile.environment.${self:provider.stage}.RDS_CONN_LIMMIT}
      SECRET: ${self:custom.otherfile.environment.${self:provider.stage}.SECRET}
    events:
      - http:
          path: /api/{all+}
          method: any
          cors:
            origin: http://localhost:3000
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
